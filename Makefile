
# Define the constants for folders and files (Relevant to normal debug and release).
PATH_CUR 			:= $(shell pwd)
PATH_SRC 			:= $(PATH_CUR)/src/
PATH_INC 			:= $(PATH_CUR)/include/
PATH_OBJ 			:= $(PATH_CUR)/obj/
PATH_OUT_DBG 		:= $(PATH_CUR)/debug/
PATH_OUT_REL 		:= $(PATH_CUR)/release/
NAME_EXE 			:= mba
NAME_LIB 			:= lib$(NAME_EXE)
ifeq ($(DEBUG), yes)
	PATH_OUT := $(PATH_OUT_DBG)$(NAME_EXE)
else
	PATH_OUT := $(PATH_OUT_REL)$(NAME_EXE)
endif


# Create the relevant folders to store objective and executable files.
FOLDER_OBJ 			:= $(shell mkdir -p $(PATH_OBJ))
FOLDER_OUT_DBG 		:= $(shell mkdir -p $(PATH_OUT_DBG))
FOLDER_OUT_REL 		:= $(shell mkdir -p $(PATH_OUT_REL))


# Specify the compilation options.
CC 			:= gcc
LIBS 		:= -ldl -lm
FLAG 		:= -fPIC
ifeq ($(DEBUG), yes)
	FLAG := $(FLAG) -g
endif
ifeq ($(COVERAGE), yes)
	FLAG := $(FLAG) -O0 --coverage
endif


# List the dependencies for project building.
DEPENDENCY 		:= mba spew except
VPATH 			:= $(PATH_INC)


# List the project building rules.
executable: entry
	$(CC) $(FLAG) -o $(PATH_OUT) $(PATH_OBJ)*.o $(LIBS)

entry: $(DEPENDENCY)
	$(CC) $(FLAG) -I$(PATH_INC) -c $(PATH_SRC)$@.c -o $(PATH_OBJ)$@.o

$(DEPENDENCY):
	$(CC) $(FLAG) -I$(PATH_INC) -c $(PATH_SRC)$@.c -o $(PATH_OBJ)$@.o


# List the project cleaning rule.
.PHONY: clean
clean:
	rm -rf $(PATH_OBJ) $(PATH_OUT_DBG) $(PATH_OUT_REL)


# List the project execution rules.
run:
ifeq ($(DEBUG), yes)
	valgrind --leak-check=yes --track-origins=yes \
    $(PATH_OUT)
else
	$(PATH_OUT)
endif


# List the code coverage testing rules.
coverage: run


