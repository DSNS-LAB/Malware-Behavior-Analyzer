#ifndef _MBA_H_
#define _MBA_H_


#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


typedef char CONFIG_KEY;
typedef char CONFIG_VALUE;


typedef struct _MBA {
    
    /* MBA configuration parameters. */

    /* MBA operations. */
    int (*set_config) (struct _MBA*, CONFIG_KEY, CONFIG_VALUE);
    int (*revert)     (struct _MBA*);
    int (*process)    (struct _MBA*);
    int (*kill)       (struct _MBA*);
    int (*log)        (struct _MBA*);
} MBA;


/* Wrapper for MBA initialization. */
#define init_MBA(p)     bool check; \
                        p = (MBA*)malloc(sizeof(MBA)); \
                        if (p != NULL) { \
                            check = MBAInit(p); \
                            if (check == false) { \
                                free(p); \
                            } \
                        } 


/* Wrapper for MBA deinitialization. */
#define deinit_MBA(p)   if (p != NULL) { \
                            MBADenint(p); \
                            free(p); \
                        }


/* MBA default constructor. */
bool MBAInit(MBA *self);


/* MBA default destructor.  */
bool MBADenint(MBA *self);


/**
 * MBA operation: Set the configuration parameters.
 *
 * @param self          The pointer to the MBA structure.
 * @param config_key    The key for the configuration option.
 * @param config_val    The value for the configuration option. 
 *
 * @return              0: Task if finished successfully.
 *                     -1: Exception occurs due to insufficient memory.
 */
/* MBA operation: Set the configuration parameters. */
int MBASetConfig(MBA *self, CONFIG_KEY config_key, CONFIG_VALUE config_val);


/**
 * MBA operation: Start the VM image.
 *
 * @param self          The pointer to the MBA structure.
 * 
 * @return              0: Task is finished successfully.
 *                     -1: Exception occurs due to insufficient memory.
 */
int MBARevert(MBA *self);


/**
 * MBA operation: Start the injected program.
 *
 * @param self          The pointer to the MBA structure.
 * 
 * @return              0: Task is finished successfully.
 *                     -1: Exception occurs due to insufficient memory.
 */
int MBAProcess(MBA *self);


/**
 * MBA operation: Abort the analysis process.
 *
 * @param self          The pointer to the MBA structure.
 *
 * @return              0: Task is finished successfully.
 *                     -1: Exception occurs due to insufficient memory.
 */
int MBAKill(MBA *self);


/**
 * MBA operation: Get the behavior log.
 *
 * @param self          The pointer to the MBA structure.
 *
 * @return              0: Task is finished successfully.
 *                     -1: Exception occurs due to insufficient memory.
 */
int MBALog(MBA *self);

#endif

